package main

import (
	"flag"
	"net"
	"net/http"
	
	"github.com/go-kit/kit/log"
	"github.com/oklog/oklog/pkg/group"
)

func main() {
	// 1. 定义命令行参数
	var (
		httpAddr = flag.String("http-addr", ":8080", "HTTP listen address")
	)
	flag.Parse()
	
	// 2. 定义一个全局用的logger
	var logger log.Logger
	{
		logger = log.NewLogfmtLogger(os.Stderr)
		logger = log.With(logger, "ts", log.DefaultTimestampUTC)
		logger = log.With(logger, "caller", log.DefaultCaller)
	}
	
	// 3. 初始化service、endpoint、httpHandler
	var (
		service		= addservice.New(logger, ints, chars)
		service        = {{.Name}}.NewService()
		endpoints      = {{.Name}}.NewEndpoint(service, logger, duration, tracer, zipkinTracer)
		httpHandler    = {{.Name}}.NewHTTPHandler(endpoints, tracer, zipkinTracer, logger)
	)

	// 	4. 定义一个全局的server并绑定httpHadnler
	var g group.Group
	{
		httpListener, err := net.Listen("tcp", *httpAddr)
		if err != nil {
			logger.Log("transport", "HTTP", "during", "Listen", "err", err)
			os.Exit(1)
		}
		g.Add(func() error {
			logger.Log("transport", "HTTP", "addr", *httpAddr)
			return http.Serve(httpListener, httpHandler)
		}, func(error) {
			httpListener.Close()
		})
	}

	// 	5. 定义一个中断事件监听
	{
		// This function just sits and waits for ctrl-C.
		cancelInterrupt := make(chan struct{})
		g.Add(func() error {
			c := make(chan os.Signal, 1)
			signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
			select {
			case sig := <-c:
				return fmt.Errorf("received signal %s", sig)
			case <-cancelInterrupt:
				return nil
			}
		}, func(error) {
			close(cancelInterrupt)
		})
	}
	
	// 6. 运行服务
	logger.Log("exit", g.Run())
}