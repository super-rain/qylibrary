// Code generated by gcodex, DO NOT EDIT.

package lottery

import (
	"context"
	"database/sql"
	"time"

	"qygroot/internal/core"
	"qygroot/pkg/framework"
	"qygroot/pkg/gsqlx"

	"github.com/golang/protobuf/ptypes/any"
)

type LotteryRepository struct {
	core.BaseRepository
}

func NewLotteryRepository() *LotteryRepository {
	db := core.NewRepository()

	return &LotteryRepository{db}
}

func (repo *LotteryRepository) Find(ctx context.Context, params LoadLotteryRequestData) (*Lottery, error) {
	dest := new(Lottery)
	b := new(gsqlx.SQLBuilder)
	sqlstr := b.Table(dest.TableName()).Where("id=?").Build()
	err := repo.DB1.GetContext(ctx, dest, sqlstr, params.ID)
	if err == sql.ErrNoRows {
		return nil, framework.ErrNoRecordFound
	} else if err != nil {
		return nil, err
	}

	return dest, nil
}

func (repo *LotteryRepository) FindAll(ctx context.Context) ([]Lottery, error) {
	var list []Lottery
	b := new(gsqlx.SQLBuilder)
	sqlstr := b.Table(new(Lottery).TableName()).Build()
	err := repo.DB1.SelectContext(ctx, list, sqlstr)
	if err != nil {
		return nil, err
	}

	return list, nil
}

func (repo *LotteryRepository) Create(ctx context.Context, item Lottery) error {
	insert := "insert into " + new(Lottery).TableName() + "(activity_id,title,style ,bkg_img ,btn_bkg_img ,selected_bkg_img,is_on,default_btn_text,selecting_btn_text ,selected_btn_text,begin_time,end_time,remark ,operator,updated_at) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
	result, err := repo.DB1.ExecContext(ctx, insert, item.ActivityID, item.Title, item.Style, item.BkgImg, item.BtnBkgImg, item.SelectedBkgImg, item.IsOn, item.DefaultBtnText, item.SelectingBtnText, item.SelectedBtnText, item.BeginTime, item.EndTime, item.Remark, item.Operator, time.Now())
	if err != nil {
		return err
	}
	flag, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if flag <= 0 {
		return framework.ErrNoRecordFound
	}

	return nil
}

func (repo *LotteryRepository) Update(ctx context.Context, id int64, item Lottery) error {
	if id <= 0 {
		return framework.ErrInvalidArgument
	}
	update := "update" + new(Lottery).TableName() + "set title=?,style=?,bkg_img=?,btn_bkg_img=?,selected_bkg_img=?,is_on=?,default_btn_text=?,selecting_btn_text=? ,selected_btn_text=?,begin_time=?,end_time=?,remark=?,updated_at=? where id=?"
	result, err := repo.DB1.ExecContext(ctx, update, item.Title, item.Style, item.BkgImg, item.BtnBkgImg, item.SelectedBkgImg, item.IsOn, item.DefaultBtnText, item.SelectingBtnText, item.SelectedBtnText, item.BeginTime, item.EndTime, item.Remark, time.Now(), id)
	if err != nil {
		return err
	}
	flag, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if flag <= 0 {
		return framework.ErrNoRecordFound
	}

	return nil
}

func (repo *LotteryRepository) Delete(ctx context.Context, id int64) error {
	if id <= 0 {
		return framework.ErrInvalidArgument
	}
	del := "delete from " + new(Lottery).TableName() + " where id=?"
	result, err := repo.DB1.ExecContext(ctx, del, id)
	if err != nil {
		return err
	}
	flag, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if flag <= 0 {
		return framework.ErrNoRecordFound
	}

	return nil
}










# service 函数模版

var CreateFuncTmpl=`

`

var UpdateFuncTmpl=`

`
var DeleteFuncTmpl=`

`

var FindOneFuncTmpl=`

`

var FindAllFuncTmpl=`

`