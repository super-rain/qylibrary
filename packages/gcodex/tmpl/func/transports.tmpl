package lottery

import (
	"context"
	"encoding/json"
	"net/http"
	"qygroot/pkg/framework"
	"strconv"

	kitlog "github.com/go-kit/kit/log"
	"github.com/go-kit/kit/transport"
	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"
)

func MakeHandler(bs Service, logger kitlog.Logger) http.Handler {
	opts := []kithttp.ServerOption{
		kithttp.ServerErrorHandler(transport.NewLogErrorHandler(logger)),
		kithttp.ServerErrorEncoder(encodeError),
	}

	listLotteryHandler := kithttp.NewServer(
		makeListLotteryEndpoint(bs),
		decodeListLotteryRequest,
		encodeResponse,
		opts...,
	)

	loadLotteryHandler := kithttp.NewServer(
		makeLoadLotteryEndpoint(bs),
		decodeLoadLotteryRequest,
		encodeResponse,
		opts...,
	)

	addLotteryHandler := kithttp.NewServer(
		makeAddLotteryEndpoint(bs),
		decodeAddLotteryRequest,
		encodeResponse,
		opts...,
	)

	changeLotteryHandler := kithttp.NewServer(
		makeDeleteLotteryEndpoint(bs),
		decodeChangeLotteryRequest,
		encodeResponse,
		opts...,
	)

	deleteLotteryHandler := kithttp.NewServer(
		makeLoadLotteryEndpoint(bs),
		decodeDeleteLotteryRequest,
		encodeResponse,
		opts...,
	)
	r := mux.NewRouter()

	r.Handle("/api/v1/lotterys", listLotteryHandler).Methods("GET")
	r.Handle("/api/v1/lotterys/{id}", loadLotteryHandler).Methods("GET")
	r.Handle("/api/v1/lotterys", addLotteryHandler).Methods("POST")
	r.Handle("/api/v1/lotterys/{id}", changeLotteryHandler).Methods("PUT")
	r.Handle("/api/v1/lotterys/{id}", deleteLotteryHandler).Methods("DELETE")

	return r
}

func decodeListLotteryRequest(_ context.Context, r *http.Request) (interface{}, error) {
	return nil, nil
}

func decodeLoadLotteryRequest(_ context.Context, r *http.Request) (interface{}, error) {
	vars := mux.Vars(r)
	id, ok := vars["id"]
	if !ok {
		return nil, framework.ErrBadRoute
	}
	idV, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, framework.ErrInvalidArgument
	}
	return LoadLotteryRequestData{
		ID: idV,
	}, nil
}

func decodeAddLotteryRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var body LotteryRequestData
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		return nil, err
	}

	return body, nil
}

func decodeChangeLotteryRequest(_ context.Context, r *http.Request) (interface{}, error) {
	vars := mux.Vars(r)
	id, ok := vars["id"]
	if !ok {
		return nil, framework.ErrBadRoute
	}
	idV, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, framework.ErrInvalidArgument
	}
	var body LotteryDTO
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		return nil, err
	}

	return LotteryRequestData{
		ID:   idV,
		Item: body,
	}, nil
}

func decodeDeleteLotteryRequest(_ context.Context, r *http.Request) (interface{}, error) {
	vars := mux.Vars(r)
	id, ok := vars["id"]
	if !ok {
		return nil, framework.ErrBadRoute
	}
	idV, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, framework.ErrInvalidArgument
	}
	return LoadLotteryRequestData{
		ID: idV,
	}, nil
}

func encodeResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	if e, ok := response.(errorer); ok && e.error() != nil {
		encodeError(ctx, e.error(), w)
		return nil
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	return json.NewEncoder(w).Encode(response)
}

type errorer interface {
	error() error
}

// encode errors from business-logic
func encodeError(_ context.Context, err error, w http.ResponseWriter) {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	switch err {
	case framework.ErrUnknown:
		w.WriteHeader(http.StatusNotFound)
	case framework.ErrInvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}
	json.NewEncoder(w).Encode(map[string]interface{}{
		"error": err.Error(),
	})
}
