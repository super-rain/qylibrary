package {{.PackageName}}

import (
	"context"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-kit/kit/circuitbreaker"
	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/ratelimit"
	"github.com/go-kit/kit/tracing/opentracing"
	"github.com/go-kit/kit/tracing/zipkin"
	"github.com/go-kit/kit/transport"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"
)

// balancing & service discovery
// limiting
// circuitbreaker
// tracing
// metrics
// logging
// middleware ...
// NewHTTPHandler returns a handler for the {{.Name}} service.
func NewHTTPHandler(endpoints {{ToCamel .Name}}Set, otTracer stdopentracing.Tracer, zipkinTracer *stdzipkin.Tracer, logger log.Logger) http.Handler {
	opts := []kithttp.ServerOption{
		kithttp.ServerErrorHandler(transport.NewLogErrorHandler(logger)),
		kithttp.ServerErrorEncoder(encodeError),
	}

	if zipkinTracer != nil {
		options = append(options, zipkin.HTTPServerTrace(zipkinTracer))
	}

	{{.Name}}ListHandler := kithttp.NewServer(
		make{{ToCamel .Name}}ListEndpoint(bs),
		decode{{ToCamel .Name}}ListRequest,
		encodeResponse,
		append(options, httptransport.ServerBefore(opentracing.HTTPToContext(otTracer, "{ToCamel .Name}}Service.GetAll", logger)))...,
	)

	load{{ToCamel .Name}}Handler := kithttp.NewServer(
		makeLoad{{ToCamel .Name}}Endpoint(bs),
		decodeLoad{{ToCamel .Name}}Param,
		encodeResponse,
		append(options, httptransport.ServerBefore(opentracing.HTTPToContext(otTracer, "{ToCamel .Name}}Service.Get", logger)))...,
	)

	add{{ToCamel .Name}}Handler := kithttp.NewServer(
		makeAdd{{ToCamel .Name}}Endpoint(bs),
		decodeAdd{{ToCamel .Name}}Request,
		encodeResponse,
		append(options, httptransport.ServerBefore(opentracing.HTTPToContext(otTracer, "{ToCamel .Name}}Service.Add", logger)))...,
	)

	change{{ToCamel .Name}}Handler := kithttp.NewServer(
		makeChange{{ToCamel .Name}}Endpoint(bs),
		decodeChange{{ToCamel .Name}}Request,
		encodeResponse,
		append(options, httptransport.ServerBefore(opentracing.HTTPToContext(otTracer, "{ToCamel .Name}}Service.Edit", logger)))...,
	)

	delete{{ToCamel .Name}}Handler := kithttp.NewServer(
		makeDelete{{ToCamel .Name}}Endpoint(bs),
		decodeDelete{{ToCamel .Name}}Request,
		encodeResponse,
		append(options, httptransport.ServerBefore(opentracing.HTTPToContext(otTracer, "Sum", append(options, httptransport.ServerBefore(opentracing.HTTPToContext(otTracer, "{ToCamel .Name}}Service.delete", logger))))))...,
	)

	r := mux.NewRouter()
	r.Handle("/api/v1/{{.Name}}s", {{.Name}}ListHandler).Methods("GET")
	r.Handle("/api/v1/{{.Name}}s/{id}", load{{ToCamel .Name}}Handler).Methods("GET")
	r.Handle("/api/v1/{{.Name}}s", add{{ToCamel .Name}}Handler).Methods("POST")
	r.Handle("/api/v1/{{.Name}}s/{id}", change{{ToCamel .Name}}Handler).Methods("PUT")
	r.Handle("/api/v1/{{.Name}}s/{id}", delete{{ToCamel .Name}}Handler).Methods("DELETE")

	return r
}

func NewHTTPClient(instance string, otTracer stdopentracing.Tracer, zipkinTracer *stdzipkin.Tracer, logger log.Logger) (addservice.Service, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}
	u, err := url.Parse(instance)
	if err != nil {
		return nil, err
	}

	limiter := ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), 100))

	var options []httptransport.ClientOption

	if zipkinTracer != nil {
		options = append(options, zipkin.HTTPClientTrace(zipkinTracer))
	}

	var load{{ToCamel .Name}}Endpoint endpoint.Endpoint
	{
		load{{ToCamel .Name}}Endpoint = httptransport.NewClient(
			"POST",
			copyURL(u, "{{.Name}}/\{\{id\}\}"),
			decodeLoad{{ToCamel .Name}},
			encodeResponse,
			append(options, httptransport.ClientBefore(opentracing.ContextToHTTP(otTracer, logger)))...,
		).Endpoint()
		load{{ToCamel .Name}}Endpoint = opentracing.TraceClient(otTracer, "{ToCamel .Name}}Service.Get")(load{{ToCamel .Name}}Endpoint)
		if zipkinTracer != nil {
			load{{ToCamel .Name}}Endpoint = zipkin.TraceEndpoint(zipkinTracer, "{ToCamel .Name}}Service.Get")(load{{ToCamel .Name}}Endpoint)
		}
		load{{ToCamel .Name}}Endpoint = limiter(load{{ToCamel .Name}}Endpoint)
		load{{ToCamel .Name}}Endpoint = circuitbreaker.Gobreaker(gobreaker.NewCircuitBreaker(gobreaker.Settings{
			Name:    "{ToCamel .Name}}Service.Get",
			Timeout: 30 * time.Second,
		}))(load{{ToCamel .Name}}Endpoint)
	}
	var {{.Name}}ListEndpoint endpoint.Endpoint
	{
		{{.Name}}ListEndpoint = httptransport.NewClient(
			"POST",
			copyURL(u, "{{.Name}}/list"),
			decode{{ToCamel .Name}}ListRequest,
			encodeResponse,
			append(options, httptransport.ClientBefore(opentracing.ContextToHTTP(otTracer, logger)))...,
		).Endpoint()
		{{.Name}}ListEndpoint = opentracing.TraceClient(otTracer, "{ToCamel .Name}}Service.GetAll")({{.Name}}ListEndpoint)
		if zipkinTracer != nil {
			{{.Name}}ListEndpoint = zipkin.TraceEndpoint(zipkinTracer, "{ToCamel .Name}}Service.GetAll")({{.Name}}ListEndpoint)
		}
		{{.Name}}ListEndpoint = limiter({{.Name}}ListEndpoint)
		{{.Name}}ListEndpoint = circuitbreaker.Gobreaker(gobreaker.NewCircuitBreaker(gobreaker.Settings{
			Name:    "{ToCamel .Name}}Service.GetAll",
			Timeout: 30 * time.Second,
		}))({{.Name}}ListEndpoint)
	}
	var add{{ToCamel .Name}}Endpoint endpoint.Endpoint
	{
		add{{ToCamel .Name}}Endpoint = httptransport.NewClient(
			"POST",
			copyURL(u, "{{.Name}}/add"),
			encodeResponse,
			decodeAdd{{ToCamel .Name}}Request,
			append(options, httptransport.ClientBefore(opentracing.ContextToHTTP(otTracer, logger)))...,
		).Endpoint()
		add{{ToCamel .Name}}Endpoint = opentracing.TraceClient(otTracer, "{ToCamel .Name}}Service.Add")(add{{ToCamel .Name}}Endpoint)
		if zipkinTracer != nil {
			add{{ToCamel .Name}}Endpoint = zipkin.TraceEndpoint(zipkinTracer, "{ToCamel .Name}}Service.Add")(add{{ToCamel .Name}}Endpoint)
		}
		add{{ToCamel .Name}}Endpoint = limiter(add{{ToCamel .Name}}Endpoint)
		add{{ToCamel .Name}}Endpoint = circuitbreaker.Gobreaker(gobreaker.NewCircuitBreaker(gobreaker.Settings{
			Name:    "{ToCamel .Name}}Service.Add",
			Timeout: 30 * time.Second,
		}))(add{{ToCamel .Name}}Endpoint)
	}
	var change{{ToCamel .Name}}Endpoint endpoint.Endpoint
	{
		change{{ToCamel .Name}}Endpoint = httptransport.NewClient(
			"POST",
			copyURL(u, "{{.Name}}/edit"),
			decodeChange{{ToCamel .Name}}Request,
			encodeResponse,
			append(options, httptransport.ClientBefore(opentracing.ContextToHTTP(otTracer, logger)))...,
		).Endpoint()
		change{{ToCamel .Name}}Endpoint = opentracing.TraceClient(otTracer, "{ToCamel .Name}}Service.Edit")(change{{ToCamel .Name}}Endpoint)
		if zipkinTracer != nil {
			change{{ToCamel .Name}}Endpoint = zipkin.TraceEndpoint(zipkinTracer, "{ToCamel .Name}}Service.Edit")(change{{ToCamel .Name}}Endpoint)
		}
		change{{ToCamel .Name}}Endpoint = limiter(change{{ToCamel .Name}}Endpoint)
		change{{ToCamel .Name}}Endpoint = circuitbreaker.Gobreaker(gobreaker.NewCircuitBreaker(gobreaker.Settings{
			Name:    "{ToCamel .Name}}Service.Edit",
			Timeout: 30 * time.Second,
		}))(change{{ToCamel .Name}}Endpoint)
	}
	var delete{{ToCamel .Name}}Endpoint endpoint.Endpoint
	{
		delete{{ToCamel .Name}}Endpoint = httptransport.NewClient(
			"POST",
			copyURL(u, "{{.Name}}/delete"),
			decodeDelete{{ToCamel .Name}}Request,
			encodeResponse,
			append(options, httptransport.ClientBefore(opentracing.ContextToHTTP(otTracer, logger)))...,
		).Endpoint()
		delete{{ToCamel .Name}}Endpoint = opentracing.TraceClient(otTracer, "{ToCamel .Name}}Service.Delete")(delete{{ToCamel .Name}}Endpoint)
		if zipkinTracer != nil {
			delete{{ToCamel .Name}}Endpoint = zipkin.TraceEndpoint(zipkinTracer, "{ToCamel .Name}}Service.Delete")(delete{{ToCamel .Name}}Endpoint)
		}
		delete{{ToCamel .Name}}Endpoint = limiter(delete{{ToCamel .Name}}Endpoint)
		delete{{ToCamel .Name}}Endpoint = circuitbreaker.Gobreaker(gobreaker.NewCircuitBreaker(gobreaker.Settings{
			Name:    "{ToCamel .Name}}Service.Delete",
			Timeout: 30 * time.Second,
		}))(delete{{ToCamel .Name}}Endpoint)
	}
	

	return {{ToCamel .Name}}Set{
		Load{{ToCamel .Name}}Endpoint: load{{ToCamel .Name}}Endpoint,
		{{ToCamel .Name}}ListEndpoint: {{.Name}}ListEndpoint,
		Add{{ToCamel .Name}}Endpoint: add{{ToCamel .Name}}Endpoint,
		Change{{ToCamel .Name}}Endpoint: change{{ToCamel .Name}}Endpoint,
		Delete{{ToCamel .Name}}Endpoint: delete{{ToCamel .Name}}Endpoint, nil
}

func copyURL(base *url.URL, path string) *url.URL {
	next := *base
	next.Path = path
	return &next
}

func decode{{ToCamel .Name}}ListRequest(_ context.Context, r *http.Request) (interface{}, error) {
	return nil, nil
}

func decodeLoad{{ToCamel .Name}}Param(_ context.Context, r *http.Request) (interface{}, error) {
	vars := mux.Vars(r)
	id, ok := vars["id"]
	if !ok {
		return nil, framework.ErrBadRoute
	}
	idV, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, framework.ErrInvalidArgument
	}
	return Load{{ToCamel .Name}}Param{
		ID: idV,
	}, nil
}

func decodeAdd{{ToCamel .Name}}Request(_ context.Context, r *http.Request) (interface{}, error) {
	var body {{ToCamel .Name}}RequestData
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		return nil, err
	}

	return body, nil
}

func decodeChange{{ToCamel .Name}}Request(_ context.Context, r *http.Request) (interface{}, error) {
	vars := mux.Vars(r)
	id, ok := vars["id"]
	if !ok {
		return nil, framework.ErrBadRoute
	}
	idV, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, framework.ErrInvalidArgument
	}
	var body {{ToCamel .Name}}DTO
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		return nil, err
	}

	return {{ToCamel .Name}}RequestData{
		ID:   idV,
		Item: body,
	}, nil
}

func decodeDelete{{ToCamel .Name}}Request(_ context.Context, r *http.Request) (interface{}, error) {
	vars := mux.Vars(r)
	id, ok := vars["id"]
	if !ok {
		return nil, framework.ErrBadRoute
	}
	idV, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, framework.ErrInvalidArgument
	}
	return Load{{ToCamel .Name}}RequestData{
		ID: idV,
	}, nil
}

type errorer interface {
	error() error
}

func encodeResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	if e, ok := response.(errorer); ok && e.error() != nil {
		encodeError(ctx, e.error(), w)
		return nil
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	return json.NewEncoder(w).Encode(response)
}

// encode errors from business-logic
func encodeError(_ context.Context, err error, w http.ResponseWriter) {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	switch err {
	case framework.ErrUnknown:
		w.WriteHeader(http.StatusNotFound)
	case framework.ErrInvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}
	json.NewEncoder(w).Encode(map[string]interface{}{
		"error": err.Error(),
	})
}
