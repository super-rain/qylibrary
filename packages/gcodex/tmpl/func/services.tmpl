// Code generated by gcodex, DO NOT EDIT.

package {{.PackageName}}

import (
	"context"

	{{- range $pkg:=.Packages}}
	"{{$pkg}}"
	{{end -}}
)

// type BaseService interface {
// 	Get(ctx context.Context, params *{{.RequestDataType}}) (*{{.ResponseDataType}}, error)
// 	GetAll(ctx context.Context) ([]{{.Model}}, error)
// 	Add(ctx context.Context, item {{.ModelDTO}}) error
// 	Edit(ctx context.Context, id int64, item {{.ModelDTO}}) error
// 	Delete(ctx context.Context, id int64) error
// }

// TODO: public:允许外网访问，internal:内部访问，支持后台服务间调用/高级聚合接口/内部服务调用/分布式事务
type {{.ModelService}} struct {
	repo *LotteryRepository
}

func NewService(ctx context.Context) *{{.ModelService}} {
	l := new({{.ModelService}})
	l.repo = NewLotteryRepository()
	return l
}

func (svc *{{.ModelService}}) Get(ctx context.Context, params {{.RequestDataType}}) (*{{.ResponseDataType}}, error) {
	item, err := svc.repo.Find(ctx, params)
	if err != nil {
		return nil, err
	}
	// TODO: entity copyto reponse data
	return &{{.ResponseDataType}}{*item}, nil
}

func (svc *{{.ModelService}}) GetAll(ctx context.Context) ([]Lottery, error) {
	return svc.repo.FindAll(ctx)
}

func (svc *{{.ModelService}}) Add(ctx context.Context, item {{.ModelDTO}}) error {
	//TODO: dto>entity
	return svc.repo.Create(ctx, item)
}

func (svc *{{.ModelService}}) Edit(ctx context.Context, id int64, item {{.ModelDTO}}) error {
	//TODO: dto>entity
	return svc.repo.Update(ctx, id, item)
}

func (svc *{{.ModelService}}) Delete(ctx context.Context, id int64) error {
	return svc.repo.Delete(ctx, id)
}