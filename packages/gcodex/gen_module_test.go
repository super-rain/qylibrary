package gcodex

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_genSchemaCode(t *testing.T) {
	tbs := []*TableMetaData{
		{
			PackageName: "schema",
			Name:        "user",
			Comment:     "用户表",
			Columns: []*ColumnType{
				{
					Name:       "user_name",
					StructTag:  "user_name",
					StorageKey: "user_name",
					Comment:    "用户名",
					FieldType:  "string",
					DefaultVal: DefaultValue[TypeString],
					MaxLen:     64,
					IsUnique:   true,
					UidxName:   "uidx_user_name",
				},
				{
					Name:          "age",
					StructTag:     "age",
					StorageKey:    "age",
					Comment:       "年龄",
					FieldType:     "int",
					DefaultVal:    0,
					MaxLen:        64,
					MinLen:        10,
					IsNonNegative: false,
					Scale:         2,
					AutoInc:       true,
					IsSensitive:   true,
					IsImmutable:   false,
					IsOptional:    true,
					Enumerable:    false,
					// EnumVals:      `"11", "222", "333"`,
					EnumVals:     `1, 2, 33`,
					IsPrimary:    true,
					PkName:       "pkname",
					IsForeignKey: true,
					FkName:       "fkname",
					IsUnique:     true,
					UidxName:     "uidxname",
					IsIndex:      true,
					IdxName:      "idxname",
				},
				{
					Name:          "una2",
					StructTag:     "una2",
					StorageKey:    "una2",
					Comment:       "una2eeeee",
					FieldType:     "int",
					DefaultVal:    0,
					MaxLen:        64,
					MinLen:        10,
					IsNonNegative: true,
					Scale:         2,
					Precision:     0,
					AutoInc:       true,
					IsSensitive:   true,
					IsImmutable:   false,
					IsOptional:    true,
					Enumerable:    false,
					EnumVals:      `"11", "222", "333"`,
					// EnumVals:      `1, 2, 33`,
					IsPrimary:    true,
					PkName:       "pkname",
					IsForeignKey: true,
					FkName:       "fkname",
					IsUnique:     true,
					UidxName:     "uidxname",
					IsIndex:      true,
					IdxName:      "idxname",
				},
				// {
				// 	Name:       "password",
				// 	StorageKey: "pwd",
				// 	Comment:    "密码",
				// 	FieldType:  TypeString,
				// 	DefaultVal: "",
				// 	MaxLen:     64,
				// },
				// {
				// 	Name:        "salt",
				// 	StructTag:   "salt",
				// 	StorageKey:  "salt",
				// 	Comment:     "密码盐",
				// 	FieldType:   TypeString,
				// 	DefaultVal:  "",
				// 	MaxLen:      64,
				// 	IsSensitive: true,
				// 	IsImmutable: true,
				// 	IsOptional:  true,
				// },
				// {
				// 	Name:        "avatar",
				// 	StructTag:   "avatar",
				// 	StorageKey:  "avatar",
				// 	Comment:     "头像",
				// 	FieldType:   TypeString,
				// 	DefaultVal:  "",
				// 	MaxLen:      1024,
				// 	IsSensitive: true,
				// 	IsImmutable: true,
				// 	IsOptional:  false,
				// },
				// {
				// 	Name:       "user_code",
				// 	Comment:    "用户码",
				// 	FieldType:  TypeString,
				// 	DefaultVal: "",
				// 	MaxLen:     32,
				// 	MinLen:     10,
				// 	IsOptional: false,
				// },
				// {
				// 	Name:        "phone",
				// 	Comment:     "联系方式",
				// 	FieldType:   TypeString,
				// 	DefaultVal:  "",
				// 	MaxLen:      16,
				// 	IsImmutable: true,
				// },
				// {
				// 	Name:        "is_deleted",
				// 	StructTag:   "is_deleted",
				// 	StorageKey:  "is_deleted",
				// 	Comment:     "是否删除",
				// 	FieldType:   TypeBool,
				// 	IsImmutable: true,
				// 	DefaultVal:  false,
				// 	Enumerable:  false,
				// 	IsIndex:     true,
				// },
				// {
				// 	Name:          "status",
				// 	StructTag:     "status",
				// 	StorageKey:    "status",
				// 	Comment:       "状态",
				// 	FieldType:     TypeInt,
				// 	Precision:     8,
				// 	DefaultVal:    0,
				// 	IsNonNegative: true,
				// 	Enumerable:    true,
				// 	EnumVals:      "0, 1, 2",
				// 	IsIndex:       true,
				// 	IdxName:       "idx_status",
				// },
				{
					Name:          "balance",
					StructTag:     "balance",
					StorageKey:    "balance",
					Comment:       "余额",
					FieldType:     "decimal",
					DefaultVal:    0.00,
					IsNonNegative: true,
					Scale:         2,
					Precision:     8,
					EnumVals:      "1.1,2.2,3.3",
					Enumerable:    true,
				},
				{
					Name:          "balance2",
					StructTag:     "balance2",
					StorageKey:    "balance2",
					Comment:       "余额",
					FieldType:     "decimal",
					DefaultVal:    0.00,
					IsNonNegative: true,
					Scale:         2,
					Precision:     10,
				},
				{
					Name:       "last_login_time",
					StructTag:  "last_login_time",
					StorageKey: "last_login_time",
					Comment:    "最后登录时间",
					FieldType:  "datetime",
					IsOptional: true,
					IsIndex:    true,
					IdxName:    "idx_last_login_time",
				},
				// &{
				// 	Name:        "created_at",
				// 	StructTag:   "created_at",
				// 	StorageKey:  "last_login_time",
				// 	Comment:     "创建时间",
				// 	FieldType:   TypeDatetime,
				// 	IsOptional:  true,
				// 	IsImmutable: true,
				// 	IsIndex:     true,
				// 	IdxName:     "idx_created_at",
				// },
				// &{
				// 	Name:        "updated_at",
				// 	StructTag:   "updated_at",
				// 	StorageKey:  "updated_at",
				// 	Comment:     "最后登录时间",
				// 	FieldType:   TypeDatetime,
				// 	IsImmutable: true,
				// 	IsIndex:     true,
				// 	IdxName:     "idx_updated_at",
				// },
			},
			Edges: []*ModelRelationShip{
				{
					To:     "UserTag",
					ToName: "tags",
				},
				{
					To:     "UserTask",
					ToName: "tasks",
				},
				{
					FromName: "groups",
					From:     "Group",
					RefName:  "users",
					To:       "Tag",
					ToName:   "tags",
				},
			},
		},
		{
			PackageName: "schema",
			Name:        "user_tag",
			Comment:     "标签表",
			Columns: []*ColumnType{
				{
					Name:       "user_id",
					StructTag:  "uid",
					StorageKey: "uid",
					Comment:    "用户ID",
					FieldType:  "string",
					DefaultVal: DefaultValue[TypeString],
					MaxLen:     64,
					IsUnique:   true,
					UidxName:   "uidx_user_id",
				},
				{
					Name:         "tag",
					StructTag:    "tag",
					StorageKey:   "tag",
					Comment:      "tag",
					FieldType:    "string",
					DefaultVal:   "dd",
					MaxLen:       64,
					MinLen:       10,
					IsSensitive:  true,
					IsOptional:   true,
					IsPrimary:    true,
					PkName:       "pkname",
					IsForeignKey: true,
					FkName:       "fkname",
					IsUnique:     true,
					UidxName:     "uidxname",
					IsIndex:      true,
					IdxName:      "idxname",
				},
			},
			Edges: []*ModelRelationShip{
				{
					To:     "User",
					ToName: "users",
				},
				{
					FromName: "owner",
					From:     "User",
					RefName:  "tags",
				},
			},
		},
	}
	opt := &DBCfgdata{
		TmplName:    "ent.tmpl",
		FilePath:    "./tmpl/",
		TarFilePath: "./dist/ent/",
		Tables:      tbs,
	}

	err := GenEntSchemaCode(opt)
	assert.Nil(t, err, "genSchemaCode() success.")
}
