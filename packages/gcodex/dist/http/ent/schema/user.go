// Code generated by gcodex, DO NOT EDIT.
// Output:./dist/ent/schema/*.go
// TODO: Extension API support HTTP Restfull API/grpc logging/metric/tracing
// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.
package schema

import (
	"errors"
	"unicode/utf8"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"
	"entgo.io/ent/schema/index"
)

// user holds the schema definition for the user entity.
type user struct {
	ent.Schema
}

// Fields of the user.
func (user) Fields() []ent.Field {
	return []ent.Field{
		field.String("user_name").
			StructTag(`json:"user_name,omitempty"`).
			StorageKey("user_name").Annotations(entsql.Annotation{
			Size: 64,
		}).Validate(MaxRuneCount(64)).Default("").
			Comment("用户名").
			NotEmpty(),
		field.Int("una1").Negative().
			StructTag(`json:"una2,omitempty"`).
			StorageKey("una2").
			Comment("una2eeeee").
			Default(dd),
		field.Int("una2").NonNegative().
			StructTag(`json:"una2,omitempty"`).
			StorageKey("una2").
			Comment("una2eeeee").
			Default(dd),
		field.Float("balance").
			SchemaType(map[string]string{
				dialect.MySQL:    "decimal(8,2)",
				dialect.Postgres: "numeric",
			}).
			StructTag(`json:"balance,omitempty"`).
			StorageKey("balance").
			Comment("余额").
			Default(0),
		field.Float("balance2").
			SchemaType(map[string]string{
				dialect.MySQL:    "decimal(10,2)",
				dialect.Postgres: "numeric",
			}).
			StructTag(`json:"balance2,omitempty"`).
			StorageKey("balance2").
			Comment("余额").
			Default(0),
		field.Time("last_login_time").
			StructTag(`json:"last_login_time,omitempty"`).
			StorageKey("last_login_time").
			Comment("最后登录时间").
			Optional().Nillable().Annotations(&entsql.Annotation{
			Default: "CURRENT_TIMESTAMP",
		}),
	}
}

// Indexes of the user.
func (user) Indexes() []ent.Index {
	return []ent.Index{
		index.Fields("user_name").StorageKey("uidx_user_name").Annotations(entsql.Desc()).Unique(),

		index.Fields("una1").StorageKey("uidxname").Annotations(entsql.Desc()).Unique(),

		index.Fields("una2").StorageKey("uidxname").Annotations(entsql.Desc()).Unique(),

		index.Fields("last_login_time").StorageKey("idx_last_login_time").Annotations(entsql.Desc()),
	}
}

// Edges of the user.
func (user) Edges() []ent.Edge {
	return []ent.Edge{}
}

// Annotations of the user.
func (user) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entsql.Annotation{Table: "用户表"},
	}
}

// MaxRuneCount validates the rune length of a string by using the unicode/utf8 package.
func MaxRuneCount(maxLen int) func(s string) error {
	return func(s string) error {
		if utf8.RuneCountInString(s) > maxLen {
			return errors.New("value is less than the min length")
		}
		return nil
	}
}

// MinRuneCount validates the rune length of a string by using the unicode/utf8 package.
func MinRuneCount(minLen int) func(s string) error {
	return func(s string) error {
		if utf8.RuneCountInString(s) < minLen {
			return errors.New("value is less than the min length")
		}
		return nil
	}

}
